#lang racket
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
( define ( make-interval a b )
     ( cons a b ) )
( define ( lower-bound a )
     ( car a ))
( define ( upper-bound a )
     ( cdr a ))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) 
                    (upper-bound y))
                 (- (upper-bound x) 
                    (lower-bound y))))
(define ( width-interval x )
  ( / ( - ( upper-bound x ) ( lower-bound x ))
        2))
(define ia ( make-interval 20 22 ))
(define ib (make-interval 37 43))
(define wa ( width-interval ia ))
(define wb ( width-interval ib ))

(define wa+b ( width-interval (add-interval ia ib )))
(define wa-b ( width-interval (sub-interval ia ib )))
(define (hasZero? x)
  (cond ( ( =(lower-bound x ) 0) #true)
        ( ( =(upper-bound x ) 0) #true)
        (else #false)))
(define ( sub-interval-correct x y )
  ( if ( or ( hasZero? x ) (hasZero? y))
       #false
        (make-interval (- (lower-bound x) 
                    (upper-bound y))
                 (- (upper-bound x) 
                    (lower-bound y)))))
